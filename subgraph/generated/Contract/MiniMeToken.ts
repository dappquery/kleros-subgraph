// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimedTokens extends EthereumEvent {
  get params(): ClaimedTokens__Params {
    return new ClaimedTokens__Params(this);
  }
}

export class ClaimedTokens__Params {
  _event: ClaimedTokens;

  constructor(event: ClaimedTokens) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get controller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends EthereumEvent {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewCloneToken extends EthereumEvent {
  get params(): NewCloneToken__Params {
    return new NewCloneToken__Params(this);
  }
}

export class NewCloneToken__Params {
  _event: NewCloneToken;

  constructor(event: NewCloneToken) {
    this._event = event;
  }

  get cloneToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get snapshotBlock(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends EthereumEvent {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MiniMeToken extends SmartContract {
  static bind(address: Address): MiniMeToken {
    return new MiniMeToken("Contract", address);
  }

  name(): string {
    let result = super.call("name", []);
    return result[0].toString();
  }

  creationBlock(): BigInt {
    let result = super.call("creationBlock", []);
    return result[0].toBigInt();
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", []);
    return result[0].toBigInt();
  }

  decimals(): i32 {
    let result = super.call("decimals", []);
    return result[0].toI32();
  }

  balanceOfAt(_owner: Address, _blockNumber: BigInt): BigInt {
    let result = super.call("balanceOfAt", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromUnsignedBigInt(_blockNumber)
    ]);
    return result[0].toBigInt();
  }

  version(): string {
    let result = super.call("version", []);
    return result[0].toString();
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", [EthereumValue.fromAddress(_owner)]);
    return result[0].toBigInt();
  }

  parentToken(): Address {
    let result = super.call("parentToken", []);
    return result[0].toAddress();
  }

  symbol(): string {
    let result = super.call("symbol", []);
    return result[0].toString();
  }

  totalSupplyAt(_blockNumber: BigInt): BigInt {
    let result = super.call("totalSupplyAt", [
      EthereumValue.fromUnsignedBigInt(_blockNumber)
    ]);
    return result[0].toBigInt();
  }

  transfersEnabled(): boolean {
    let result = super.call("transfersEnabled", []);
    return result[0].toBoolean();
  }

  parentSnapShotBlock(): BigInt {
    let result = super.call("parentSnapShotBlock", []);
    return result[0].toBigInt();
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call("allowance", [
      EthereumValue.fromAddress(_owner),
      EthereumValue.fromAddress(_spender)
    ]);
    return result[0].toBigInt();
  }

  tokenFactory(): Address {
    let result = super.call("tokenFactory", []);
    return result[0].toAddress();
  }

  controller(): Address {
    let result = super.call("controller", []);
    return result[0].toAddress();
  }
}

export class ApproveCall extends EthereumCall {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends EthereumCall {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeControllerCall extends EthereumCall {
  get inputs(): ChangeControllerCall__Inputs {
    return new ChangeControllerCall__Inputs(this);
  }

  get outputs(): ChangeControllerCall__Outputs {
    return new ChangeControllerCall__Outputs(this);
  }
}

export class ChangeControllerCall__Inputs {
  _call: ChangeControllerCall;

  constructor(call: ChangeControllerCall) {
    this._call = call;
  }

  get newController(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeControllerCall__Outputs {
  _call: ChangeControllerCall;

  constructor(call: ChangeControllerCall) {
    this._call = call;
  }
}

export class CreateCloneTokenCall extends EthereumCall {
  get inputs(): CreateCloneTokenCall__Inputs {
    return new CreateCloneTokenCall__Inputs(this);
  }

  get outputs(): CreateCloneTokenCall__Outputs {
    return new CreateCloneTokenCall__Outputs(this);
  }
}

export class CreateCloneTokenCall__Inputs {
  _call: CreateCloneTokenCall;

  constructor(call: CreateCloneTokenCall) {
    this._call = call;
  }

  get cloneTokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get cloneDecimalUnits(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get cloneTokenSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get snapshotBlock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get transfersEnabled(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class CreateCloneTokenCall__Outputs {
  _call: CreateCloneTokenCall;

  constructor(call: CreateCloneTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class GenerateTokensCall extends EthereumCall {
  get inputs(): GenerateTokensCall__Inputs {
    return new GenerateTokensCall__Inputs(this);
  }

  get outputs(): GenerateTokensCall__Outputs {
    return new GenerateTokensCall__Outputs(this);
  }
}

export class GenerateTokensCall__Inputs {
  _call: GenerateTokensCall;

  constructor(call: GenerateTokensCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GenerateTokensCall__Outputs {
  _call: GenerateTokensCall;

  constructor(call: GenerateTokensCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends EthereumCall {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveAndCallCall extends EthereumCall {
  get inputs(): ApproveAndCallCall__Inputs {
    return new ApproveAndCallCall__Inputs(this);
  }

  get outputs(): ApproveAndCallCall__Outputs {
    return new ApproveAndCallCall__Outputs(this);
  }
}

export class ApproveAndCallCall__Inputs {
  _call: ApproveAndCallCall;

  constructor(call: ApproveAndCallCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get extraData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ApproveAndCallCall__Outputs {
  _call: ApproveAndCallCall;

  constructor(call: ApproveAndCallCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DestroyTokensCall extends EthereumCall {
  get inputs(): DestroyTokensCall__Inputs {
    return new DestroyTokensCall__Inputs(this);
  }

  get outputs(): DestroyTokensCall__Outputs {
    return new DestroyTokensCall__Outputs(this);
  }
}

export class DestroyTokensCall__Inputs {
  _call: DestroyTokensCall;

  constructor(call: DestroyTokensCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DestroyTokensCall__Outputs {
  _call: DestroyTokensCall;

  constructor(call: DestroyTokensCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimTokensCall extends EthereumCall {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class EnableTransfersCall extends EthereumCall {
  get inputs(): EnableTransfersCall__Inputs {
    return new EnableTransfersCall__Inputs(this);
  }

  get outputs(): EnableTransfersCall__Outputs {
    return new EnableTransfersCall__Outputs(this);
  }
}

export class EnableTransfersCall__Inputs {
  _call: EnableTransfersCall;

  constructor(call: EnableTransfersCall) {
    this._call = call;
  }

  get transfersEnabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class EnableTransfersCall__Outputs {
  _call: EnableTransfersCall;

  constructor(call: EnableTransfersCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokenFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get parentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get parentSnapShotBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get decimalUnits(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[5].value.toString();
  }

  get transfersEnabled(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends EthereumCall {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
